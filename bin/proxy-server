#!/usr/bin/env node
var program = require('commander');
var fs = require('fs');
var PassThrough = (require('stream').PassThrough ||
        require('readable-stream').PassThrough);
var Proxy = require('../');

program
    .version(Proxy.VERSION)
    .option('-H, --host <host>', 'Allow connections from this host (default: 127.0.0.1)')
    .option('-P, --port <port>', 'Proxy port (default: 8000)')
    .option('--printurl', 'Print on the terminal every url')
    .option('--printresponsecode', 'Print on the terminal every http status code')
    .option('--sslkey <key.pem>', 'Key for ssl proxying')
    .option('--sslcertificate <certificate.pem>', 'Certificate for ssl proxying')
    .option('--recorder <recorder>', 'Select recorder (avaiable: redis)')
    .option('--redishost <host>', 'Redis host (default: 127.0.0.1)')
    .option('--redisport <port>', 'Redis port (default: 6379)')
    .option('--webviewer', 'Allow web view of the recorded data')
    .option('--webviewerport <port>', 'Port to browse data (default: 8090)')
    .parse(process.argv);

var options = {};
if (program.sslkey && program.sslcertificate) {
    options.ssl = {
        key: fs.readFileSync(program.sslkey),
        cert: fs.readFileSync(program.sslcertificate),
    };
}
var proxy = new Proxy(options);
var port = parseInt(program.port || 8000);
var host = program.host || '127.0.0.1'
if (program.printurl) {
    proxy.addRequestPipeFactory(function(requestId, request) {
        console.log('Sending request to', request.url);
        return new PassThrough();
    });
}
if (program.printresponsecode) {
    proxy.addResponsePipeFactory(function(requestId, request, response, response_data) {
        console.log('Received response', response_data.statusCode, 'for', request.url);
        return new PassThrough();
    });
}
var recorder;
if (program.recorder === 'redis') {
    var RedisRecorder = require('../lib/recorder/redis');
    var recorder = new RedisRecorder({
        redis: {
            host: program.redishost,
            port: parseInt(program.redisport)
        }
    });
    proxy.addRequestPipeFactory(recorder.request.bind(recorder));
    proxy.addResponsePipeFactory(recorder.response.bind(recorder));
} else if (program.recorder === 'memory') {
    var MemoryRecorder = require('../lib/recorder/memory');
    var recorder = new MemoryRecorder({});
    proxy.addRequestPipeFactory(recorder.request.bind(recorder));
    proxy.addResponsePipeFactory(recorder.response.bind(recorder));
}
if (program.webviewer) {
    if (!recorder) {
        throw new Error('webviewer requires a recorder to be used');
    }
    var WebViewer = require('../lib/viewer/web');
    var web_viewer = new WebViewer(recorder);
    web_viewer.listen(program.webviewerport || 8090);
}

proxy.listen(port, host, function() {
   console.log('Listening to ' + host + ':' + port);
});
